name: PR

on:
  pull_request:
    branches:
      - master

jobs:
  lint-commit-message:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Setup Node
        uses: actions/setup-node@v2-beta

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: lint-commit-messages-npm-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-${{ matrix.os }}-${{ matrix.node }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-build-${{ env.cache-name }}-
            npm-${{ runner.os }}-build-
            npm-${{ runner.os }}-
            npm-

      - name: Install dependencies
        run: |
          npm i --only=dev --prefer-offline --no-audit
          npm list --depth=0 || true

      - name: Add dependencies for commitlint action
        run: echo "::set-env name=NODE_PATH::$GITHUB_WORKSPACE/node_modules"

      - name: Lint Commit Messages
        uses: wagoid/commitlint-github-action@v1

  test-tsd:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v2-beta

      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: test-tsd-npm-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-build-${{ env.cache-name }}-
            npm-${{ runner.os }}-build-
            npm-${{ runner.os }}-
            npm-

      - name: Install dependencies
        run: |
          npm i --only=dev --prefer-offline --no-audit
          npm list --depth=0 || true

      - name: Test TypeScript definitions
        run: npm run test:tsd

  test-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Setup Node
        uses: actions/setup-node@v2-beta

      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: test-coverage-npm-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-build-${{ env.cache-name }}-
            npm-${{ runner.os }}-build-
            npm-${{ runner.os }}-
            npm-

      - name: Install dependencies (full)
        run: |
          npm i --prefer-offline --no-audit
          npm list --depth=0 || true

      - name: Coverage
        run: npm run coverage

      - name: Coverage Upload
        continue-on-error: true
        if: ${{ success() }}
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.lcov

  test-integration:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        node: # https://nodejs.org/en/about/releases/
          - '*' # Current
          - '12' # Active LTS
          - '10' # Maintenance LTS
      fail-fast: false

    steps:
      - name: Setup sudoless tcpdump (linux only)
        if: ${{ success() && startsWith(matrix.os, 'ubuntu-') }}
        run: |
          sudo groupadd pcap
          sudo usermod -a -G pcap $USER
          sudo chgrp pcap /usr/sbin/tcpdump
          sudo setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump
          sudo ln -s /usr/sbin/tcpdump /usr/bin/tcpdump

      - name: Setup sudoless tcpdump (macos only)
        if: ${{ success() && startsWith(matrix.os, 'macos-') }}
        run: |
          sudo chown $(whoami):admin /dev/bpf*

      - name: Setup Node
        uses: actions/setup-node@v2-beta
        with:
          node-version: ${{ matrix.node }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: test-integration-matrix-npm-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-${{ matrix.node }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-${{ matrix.node }}-build-${{ env.cache-name }}-
            npm-${{ runner.os }}-build-${{ env.cache-name }}-
            npm-${{ runner.os }}-build-
            npm-${{ runner.os }}-
            npm-

      - name: Install dependencies (full)
        run: |
          npm i --prefer-offline --no-audit
          npm list --depth=0 || true

      - name: Test (integration)
        run: npm run test:integration

  report-package-info:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Setup Node
        uses: actions/setup-node@v2-beta

      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: report-package-info-npm-cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-build-${{ env.cache-name }}-
            npm-${{ runner.os }}-build-
            npm-${{ runner.os }}-
            npm-

      - name: Run checks
        id: check
        run: |
          cur_version=$(node -e "console.log(require('./package.json').version)")
          pr_pkg_version_short=$(npx semver -i prerelease $cur_version)"-unreleased.pr${{ github.event.number }}.${{ github.run_number }}"
          pr_pkg_version=$pr_pkg_version_short"+sha.${{ github.sha }}"
          npm version --no-git-tag-version $pr_pkg_version

          npm_pack_log_tmp=$(mktemp --suffix=.log)
          pr_pkg_filename=$(npm pack 2>$npm_pack_log_tmp)
          pr_pkg_log=$(cat $npm_pack_log_tmp)
          pr_pkg_log="${pr_pkg_log//'%'/'%25'}"
          pr_pkg_log="${pr_pkg_log//$'\n'/'%0A'}"
          pr_pkg_log="${pr_pkg_log//$'\r'/'%0D'}"

          pr_pkg_path=$(pwd)/$pr_pkg_filename

          test_pkg_path=$(mktemp -d)
          pushd $test_pkg_path
          npm init -y

          npm_inst_log_tmp=$(mktemp --suffix=.log)
          npm i $pr_pkg_path >$npm_inst_log_tmp 2>&1
          pr_usr_pkg_inst=$(cat $npm_inst_log_tmp)
          pr_usr_pkg_inst="${pr_usr_pkg_inst//'%'/'%25'}"
          pr_usr_pkg_inst="${pr_usr_pkg_inst//$'\n'/'%0A'}"
          pr_usr_pkg_inst="${pr_usr_pkg_inst//$'\r'/'%0D'}"

          pr_usr_pkg_deps=$(npm ls --depth=1 || true)
          pr_usr_pkg_deps="${pr_usr_pkg_deps//'%'/'%25'}"
          pr_usr_pkg_deps="${pr_usr_pkg_deps//$'\n'/'%0A'}"
          pr_usr_pkg_deps="${pr_usr_pkg_deps//$'\r'/'%0D'}"

          pr_usr_pkg_du=$(du -hsc node_modules/*)
          pr_usr_pkg_du="${pr_usr_pkg_du//'%'/'%25'}"
          pr_usr_pkg_du="${pr_usr_pkg_du//$'\n'/'%0A'}"
          pr_usr_pkg_du="${pr_usr_pkg_du//$'\r'/'%0D'}"

          popd
          rm -rf $test_pkg_path

          echo "::set-output name=pkg-version-short::$pr_pkg_version_short"
          echo "::set-output name=pkg-version::$pr_pkg_version"
          echo "::set-output name=pkg-path::$pr_pkg_path"
          echo "::set-output name=pkg-log::$pr_pkg_log"
          echo "::set-output name=usr-inst::$pr_usr_pkg_inst"
          echo "::set-output name=usr-deps::$pr_usr_pkg_deps"
          echo "::set-output name=usr-du::$pr_usr_pkg_du"

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.check.outputs.pkg-version }}.tgz
          path: ${{ steps.check.outputs.pkg-path }}

      - uses: unsplash/comment-on-pr@master
        with:
          msg: |
            # Report for [v${{ steps.check.outputs.pkg-version-short }}](../actions/runs/${{ github.run_id }})

            <details>
              <summary>:package: Packing output</summary>

              ```
            ${{ steps.check.outputs.pkg-log }}
              ```
            </details>

            <details>
              <summary>:zap: Install log in dependent packages</summary>

              ```
            ${{ steps.check.outputs.usr-inst }}
              ```
            </details>

            <details>
              <summary>:information_source: Dependencies installed in dependent packages</summary>

              ```
            ${{ steps.check.outputs.usr-deps }}
              ```
            </details>

            <details>
              <summary>:bar_chart: Installed size of node_modules in dependent packages</summary>

              ```
            ${{ steps.check.outputs.usr-du }}
              ```
            </details>
          check_for_duplicate_msg: false
